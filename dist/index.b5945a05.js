"use strict";class Workout{date=new Date;id=(Date.now()+"").slice(-10);constructor(t,e,o){this.coords=t,this.distance=e,this.duration=o}_setDescription(){this.description=`${this.type[0].toUpperCase()+this.type.slice(1)} on ${["January","February","March","April","May","June","July","August","September","October","November","December"][this.date.getMonth()]} ${this.date.getDate()}`}}class Running extends Workout{constructor(t,e,o,n){super(t,e,o),this.type="running",this.cadence=n,this.calcPace(),this._setDescription()}calcPace(){return this.pace=this.duration/this.distance,this}}class Cycling extends Workout{constructor(t,e,o,n){super(t,e,o),this.type="cycling",this.elevationGain=n,this.calcSpeed(),this._setDescription()}calcSpeed(){return this.speed=this.distance/this.duration,this}}const form=document.querySelector(".form"),containerWorkouts=document.querySelector(".workouts"),inputType=document.querySelector(".form__input--type"),inputDistance=document.querySelector(".form__input--distance"),inputDuration=document.querySelector(".form__input--duration"),inputCadence=document.querySelector(".form__input--cadence"),inputElevation=document.querySelector(".form__input--elevation");class App{#t;#e;#o=13;#n=[];constructor(){this._getPosition(),this._getFromLocalStorage(),form.addEventListener("submit",this._newWorkout.bind(this)),inputType.addEventListener("change",this._toggleElevationField.bind(this)),containerWorkouts.addEventListener("click",this._moveToPopup.bind(this))}_getPosition(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(this._loadMap.bind(this),(()=>{alert("Could not get your position")}))}_loadMap(t){const{latitude:e,longitude:o}=t.coords,n=[e,o];this.#t=L.map("map").setView(n,this.#o),L.tileLayer("https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(this.#t),this.#t.on("click",this._showForm.bind(this)),this.#n.forEach((t=>this._renderWorkoutMarker(t)))}_showForm(t){this.#e=t,form.classList.remove("hidden"),inputDistance.focus()}_hideForm(){inputCadence.value=inputDistance.value=inputDuration.value=inputElevation.value="",form.style.display="none",form.classList.add("hidden"),setTimeout((()=>form.style.display="grid"),1e3)}_toggleElevationField(t){t.preventDefault(),inputElevation.closest(".form__row").classList.toggle("form__row--hidden"),inputCadence.closest(".form__row").classList.toggle("form__row--hidden")}_newWorkout(t){const e=inputType.value,o=+inputDistance.value,n=+inputDuration.value,{lat:s,lng:i}=this.#e.latlng,a=[s,i];let r;const u=(...t)=>t.every((t=>Number.isFinite(t))),c=(...t)=>t.every((t=>t>0));if(t.preventDefault(),"running"===e){const t=+inputCadence.value;if(!u(o,n,t)||!c(o,n,t))return alert("One or more of the inputs is not a positive number!");r=new Running(a,o,n,t)}if("cycling"===e){const t=+inputElevation.value;if(!u(o,n,t)||!c(o,n))return alert("One or more of the inputs is not a positive number!");r=new Cycling(a,o,n,t)}this.#n.push(r),this._renderWorkoutMarker(r),this._renderWorkoutList(r),this._hideForm(),this._setLocalStorage()}_renderWorkoutMarker(t){L.marker(t.coords).addTo(this.#t).bindPopup(L.popup({maxWidth:250,minWidth:100,autoClose:!1,closeOnClick:!1,className:`${t.type}-popup`})).setPopupContent(`${"running"===t.type?"🏃‍♂️":"🚴‍♀️"} ${t.description}`).openPopup()}_renderWorkoutList(t){let e=`\n    <li class="workout workout--${t.type}" data-id="${t.id}">\n      <h2 class="workout__title">${t.description}</h2>\n      <div class="workout__details">\n        <span class="workout__icon">${"running"===t.type?"🏃‍♂️":"🚴‍♀️"} </span>\n        <span class="workout__value">${t.distance}</span>\n        <span class="workout__unit">km</span>\n      </div>\n      <div class="workout__details">\n        <span class="workout__icon">⏱</span>\n        <span class="workout__value">${t.duration}</span>\n        <span class="workout__unit">min</span>\n      </div> \n    `;"running"===t.type&&(e+=`\n        <div class="workout__details">\n          <span class="workout__icon">⚡️</span>\n          <span class="workout__value">${t.pace.toFixed(1)}</span>\n          <span class="workout__unit">min/km</span>\n        </div>\n        <div class="workout__details">\n          <span class="workout__icon">🦶🏼</span>\n          <span class="workout__value">${t.cadence}</span>\n          <span class="workout__unit">spm</span>\n        </div>\n      </li>`),"cycling"===t.type&&(e+=`\n        <div class="workout__details">\n          <span class="workout__icon">⚡️</span>\n          <span class="workout__value">${t.speed.toFixed(1)}</span>\n          <span class="workout__unit">km/h</span>\n        </div>\n        <div class="workout__details">\n          <span class="workout__icon">⛰</span>\n          <span class="workout__value">${t.elevationGain}</span>\n          <span class="workout__unit">m</span>\n        </div>\n      </li>`),form.insertAdjacentHTML("afterend",e)}_moveToPopup(t){const e=t.target.closest(".workout");if(!e)return;const o=this.#n.find((t=>t.id===e.dataset.id));this.#t.setView(o.coords,this.#o,{animate:!0,pan:{duration:1}})}_setLocalStorage(){localStorage.setItem("workouts",JSON.stringify(this.#n))}_getFromLocalStorage(){const t=JSON.parse(localStorage.getItem("workouts"));t&&(this.#n=t,this.#n.forEach((t=>this._renderWorkoutList(t))))}reset(){localStorage.removeItem("workouts"),location.reload()}}const app=new App;
//# sourceMappingURL=index.b5945a05.js.map
