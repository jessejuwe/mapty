{"mappings":"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","sources":["script.js"],"sourcesContent":["'use strict';\n\nclass Workout {\n  date = new Date();\n\n  // using the last 10 numbers of a date object as the id. not as ideal in the real world\n  id = (Date.now() + '').slice(-10);\n  // clicks = 0;\n\n  constructor(coords, distance, duration) {\n    this.coords = coords; // [latitude, longitude]\n    this.distance = distance; // in kms\n    this.duration = duration; // in mins\n  }\n\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase() + this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  // click() {\n  //   this.clicks++;\n  //   console.log(this.clicks);\n  //   return this.clicks;\n  // }\n}\n\n// child class of Workout {}\nclass Running extends Workout {\n  // type = 'running';\n\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.type = 'running';\n    this.cadence = cadence;\n\n    // calling functions in the constructor\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    // defined in mins/km (UK)\n    // defined in miles/km (US)\n    this.pace = this.duration / this.distance;\n    return this;\n  }\n}\n\n// child class of workout {}\nclass Cycling extends Workout {\n  // type = 'cycling';\n\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.type = 'cycling';\n    this.elevationGain = elevationGain;\n\n    // calling functions in the constructor\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    // defined in km/h\n    this.speed = this.distance / this.duration;\n    return this;\n  }\n}\n// const run1 = new Running([23, -17], 100, 120, 2);\n// console.log(run1);\n/////////////////////////////////////////////////////////////////////////////\n// APPLICATION ARCHITECTURE\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  // Private instance properties\n  #map;\n  #mapEvent;\n  #mapZoomLevel = 13;\n  #workouts = [];\n\n  constructor() {\n    // Get users position\n    this._getPosition();\n\n    // Get data from local storage\n    this._getFromLocalStorage();\n\n    // Adding an Event Listener to the form\n    form.addEventListener('submit', this._newWorkout.bind(this));\n\n    // Adding an Event Listener to the input type\n    // adding .bind(this) is not necessary. the function does not use the this keyword in itself\n    inputType.addEventListener('change', this._toggleElevationField.bind(this));\n\n    // Adding an Event Listener to the container (workout)\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  // Private methods\n  // class function for getting current position of the user\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), () => {\n        alert(`Could not get your position`);\n      });\n  }\n\n  _loadMap(position) {\n    const { latitude, longitude } = position.coords;\n\n    const coords = [latitude, longitude];\n    // console.log(`https://www.google.com/maps/@${latitude},${longitude}`);\n\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    // Setting a default Map Style\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    // Handling clicks on map\n    this.#map.on('click', this._showForm.bind(this));\n\n    // Render markers on map once app loads\n    this.#workouts.forEach(work => this._renderWorkoutMarker(work));\n  }\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    // Remove the hidden class from the form\n    form.classList.remove('hidden');\n    // focus on the Distance input form field\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    // prettier-ignore\n    // Clear fields\n    inputCadence.value = inputDistance.value = inputDuration.value = inputElevation.value = '';\n\n    // Hide the form and add the hidden class to the from\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField(e) {\n    e.preventDefault();\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n\n    const { lat, lng } = this.#mapEvent.latlng;\n    const coords = [lat, lng];\n\n    let workout, className;\n\n    // Helper function for form validation (only numbers)\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n\n    // Helper function for form validation (positive numbers)\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n\n    // Get data from form\n\n    // If workout is running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n      // className = 'running-popup';\n\n      // Check if data is valid\n      // Guard clause (chexking for the oposite of the actual condition)\n      if (\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert(`One or more of the inputs is not a positive number!`);\n\n      // Create new running object\n      workout = new Running(coords, distance, duration, cadence);\n    }\n\n    // If workout is cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n      // className = 'cycling-popup';\n\n      // Check if data is valid\n      // Guard clause (chexking for the oposite of the actual condition)\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert(`One or more of the inputs is not a positive number!`);\n\n      // Create new running object\n      workout = new Cycling(coords, distance, duration, elevation);\n    }\n\n    // Add new object to the workout array\n    this.#workouts.push(workout);\n\n    // Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n\n    // Render workout on list\n    this._renderWorkoutList(workout);\n\n    // Hide form and Clear input fields\n    this._hideForm();\n\n    // Set local storage to all workouts\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n\n    // `Latitude: ${workout.coords[0].toFixed(4)} <br> Longitude: ${workout.coords[1].toFixed(4)}`\n  }\n\n  _renderWorkoutList(workout) {\n    let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n      <h2 class=\"workout__title\">${workout.description}</h2>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">${\n          workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n        } </span>\n        <span class=\"workout__value\">${workout.distance}</span>\n        <span class=\"workout__unit\">km</span>\n      </div>\n      <div class=\"workout__details\">\n        <span class=\"workout__icon\">⏱</span>\n        <span class=\"workout__value\">${workout.duration}</span>\n        <span class=\"workout__unit\">min</span>\n      </div> \n    `;\n\n    if (workout.type === 'running') {\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>`;\n    }\n\n    if (workout.type === 'cycling') {\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⛰</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>`;\n    }\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    const workoutEL = e.target.closest('.workout');\n\n    // Guard clause\n    if (!workoutEL) return;\n\n    // prettier-ignore\n    const workout = this.#workouts.find(work => work.id === workoutEL.dataset.id);\n\n    // Set view of map to target element\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: { duration: 1 },\n    });\n\n    // Using the public Interface\n    // workout.click();\n  }\n\n  _setLocalStorage() {\n    // JSON.stringify() converts objects to strings\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getFromLocalStorage() {\n    // Objects coming from local storage will not inherit all the methods they had before\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    // Guard Clause\n    if (!data) return;\n\n    // If Guard Clause returns true\n    this.#workouts = data;\n\n    this.#workouts.forEach(work => this._renderWorkoutList(work));\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"],"names":["Workout","date","Date","id","now","slice","constructor","coords","distance","duration","this","_setDescription","description","type","toUpperCase","getMonth","getDate","Running","cadence","super","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","App","map","mapEvent","mapZoomLevel","workouts","_getPosition","_getFromLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","e","preventDefault","closest","toggle","lat","lng","latlng","workout","validInputs","inputs","every","inp","Number","isFinite","allPositive","elevation","push","_renderWorkoutList","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEL","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem","location","reload","app"],"version":3,"file":"index.b5945a05.js.map"}